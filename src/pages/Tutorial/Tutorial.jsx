import React, { useEffect, useState } from "react";
import { fileService, formatDate } from "../../APIs/Services/file.service";

import { AuthActions } from "../../context/authContext";
import Cookies from "universal-cookie";
import Questions from "../../components/Questions/Questions";
import VideoPlayer from "../../components/VideoPlayer/VideoPlayer";
import dayjs from "dayjs";
import html2canvas from "html2canvas";
import image from "../../assets/images/certificateImage2.jpg";
import image3 from "../../assets/images/certificateImage3.jpg";
import instructions from "../../assets/images/instructions.png";
import { jsPDF } from "jspdf";
import { jwtDecode } from "jwt-decode";
import { useAuth } from "../../context/authContext";
import { useTranslation } from "react-i18next";
import { userSerivce } from "../../APIs/Services/user.service";

const cookies = new Cookies();

const TutorialPage = () => {
  const { t } = useTranslation();
  const { user, dispatch } = useAuth();
  console.log("üöÄ ~ TutorialPage ~ user:", user);
  const [userData, setUserData] = useState(null);
  const decodedToken = user?.token ? jwtDecode(user.token) : null;
  const userEmail = decodedToken["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"];

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const response = await userSerivce.getByEmail(userEmail);
        const updatedUser = response.data;
        setUserData(updatedUser);
      } catch (err) {
        console.error("Error fetching user data:", err);
      }
    };

    if (userEmail) {
      fetchUserData();
    }
  }, [userEmail]);

  const [isEnded, setIsEnded] = useState(user.hasCompletedTutorial);
  const [isSuccessful, setIsSuccessful] = useState(null);
  const [scorePercentage, setScorePercentage] = useState(100);
  const [showQuestions, setShowQuestions] = useState(false);

  const handleVideoEnd = async () => {
    setIsEnded(true);
    if (user.hasCompletedTutorial) return; // to do ^ here is a problem removing the token

    await userSerivce.CompletedTutorial();
    dispatch({ type: AuthActions.success, payload: { ...user, hasCompletedTutorial: true } });
    cookies.set("user", JSON.stringify({ ...user, hasCompletedTutorial: true }), {
      expires: new Date(dayjs(user.expiration)),
      path: "/",
    });
  };

  const handleCertificateGet = async () => {
    try {
      const certificateDiv = document.getElementById("certificate");
      const instructionsDiv = document.getElementById("instructions");

      if (!certificateDiv || !instructionsDiv) {
        alert("Certificate element not found!");
        return;
      }
      const screenWidth = window.innerWidth;

      // Dynamically set scale factor: Increase on smaller screens
      let SCALE_FACTOR;
      if (screenWidth < 500) {
        SCALE_FACTOR = 5; // Very high quality for small screens
      } else if (screenWidth < 768) {
        SCALE_FACTOR = 4; // Medium quality for tablets
      } else {
        SCALE_FACTOR = 1; // Normal quality for large screens
      }

      // Capture the certificate and instructions using html2canvas with a scale factor for quality
      const canvasCertificate = await html2canvas(certificateDiv, {
        scale: SCALE_FACTOR,
        // Optionally force a specific width/height if needed:
        // width: YOUR_DESIRED_WIDTH,
        // height: YOUR_DESIRED_HEIGHT,
      });
      const canvasInstructions = await html2canvas(instructionsDiv, {
        scale: SCALE_FACTOR,
      });

      const imgDataCertificate = canvasCertificate.toDataURL("image/png");
      const imgDataInstructions = canvasInstructions.toDataURL("image/png");

      // Create PDF with fixed A4 size (in points)
      const pdf = new jsPDF("portrait", "pt", "a4");
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();

      // Function to calculate proper dimensions and position for an image to fit into the page
      const addImageToPDF = (imgData) => {
        // Get the intrinsic dimensions of the image using jsPDF's built-in helper
        const imgProps = pdf.getImageProperties(imgData);
        const imgWidth = imgProps.width;
        const imgHeight = imgProps.height;

        // Calculate the scaling ratio so the image fits within the page while preserving aspect ratio
        const ratio = Math.min(pageWidth / imgWidth, pageHeight / imgHeight);
        const newWidth = imgWidth * ratio;
        const newHeight = imgHeight * ratio;

        // Center the image on the page
        const marginX = (pageWidth - newWidth) / 2;
        const marginY = (pageHeight - newHeight) / 2;

        // Add the image with the calculated dimensions and margins
        pdf.addImage(imgData, "PNG", marginX, marginY, newWidth, newHeight);
      };

      // Add the certificate image on the first page
      addImageToPDF(imgDataCertificate);

      // Add a new page and the instructions image on the second page
      pdf.addPage();
      addImageToPDF(imgDataInstructions);

      // Save the PDF
      pdf.save("certificate.pdf");
    } catch (error) {
      console.error("Error generating PDF:", error);
    }
  };

  return (
    <div className=" mt-3">
      {showQuestions ? (
        <Questions
          setScorePercentage={setScorePercentage}
          isSuccessful={isSuccessful}
          setIsSuccessful={setIsSuccessful}
        />
      ) : (
        <VideoPlayer onVideoEnd={handleVideoEnd} />
      )}

      <div className="flex justify-start mt-3">
        {(!isSuccessful || user.hasCompletedTutorial) && (
          <button
            onClick={() => setShowQuestions((x) => !x)}
            disabled={!isEnded}
            style={{
              padding: "10px 20px",
              margin: "5px",
              backgroundColor: isEnded ? "#4CAF50" : "#ccc",
              color: "white",
              border: "none",
              borderRadius: "5px",
              cursor: isEnded ? "pointer" : "not-allowed",
            }}
          >
            {showQuestions ? t("PopUp:GoBack") : t("PopUp:TakeTest")}
          </button>
        )}
      </div>
      {(isSuccessful || user.hasCompletedTest) && (
        <>
          <button
            onClick={handleCertificateGet}
            style={{
              padding: "10px 20px",
              margin: "5px",
              backgroundColor: isEnded ? "#4CAF50" : "#ccc",
              color: "white",
              border: "none",
              borderRadius: "5px",
              cursor: isEnded ? "pointer" : "not-allowed",
            }}
          >
            Download Certificate
          </button>

          <div className="mt-5">
            <div id="certificate" className="certificate relative  border border-solid border-gray-500  mx-10 p-2">
              <img src={image3} className="!w-full h-auto" alt="certificate Image" />
              <div className=" text-[1.5vw] absolute top-[48%] left-[50%] -translate-x-1/2 w-3/4  ">
                <p className="fullanme w-full text-nowrap  text-[5vw]  text-center z-2">{userData?.fullName}</p>
                <p className="flex justify-between">
                  <span>Test: </span> <span>Eingangsunterweisung Deutschland</span>
                </p>
                <p className=" text-[1.5vw] flex justify-between ">
                  <span>Ergebnis:</span> <span>(Bestanden)</span>
                </p>
                <p className=" text-[1.5vw] flex justify-between">
                  <span>Zertifikat g√ºltig bis:</span> <span>{scorePercentage} %</span>
                </p>
              </div>

              <p className="absollute absolute text-[2vw] top-[78%] right-[66%] ">{formatDate(new Date())}</p>
              <p className="absollute absolute text-[1.2vw] top-[82%] right-[69%] ">DATUM</p>
            </div>

            <div
              id="instructions"
              className="instructions aspect-[794/1122] border border-solid border-gray-500  mt-3 mx-10 p-2"
            >
              <img src={instructions} className="w-[15vw] ms-5" alt="" srcset="" />

              <div className="p-5  text-[1.5vw] flex flex-col gap-y-2">
                <p className=" mt-6 font-bold">–£—Å–ª–æ–≤–∏—è:</p>
                <p>
                  –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤ –∏ –∞–ª–∫–æ–≥–æ–ª—è –Ω–∞ –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ª—é–±—ã—Ö
                  –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤ –∏ –∞–ª–∫–æ–≥–æ–ª—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏. –ù–∞—Ä—É—à–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–∂–µ—Ç
                  –ø–æ–≤–ª–µ—á—å –∑–∞ —Å–æ–±–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã–µ –º–µ—Ä—ã –≤–ø–ª–æ—Ç—å –¥–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Ç—Ä—É–¥–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
                </p>
                <p>
                  –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ –º–µ—Å—Ç–∞—Ö –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏ —á–∏—Å—Ç–æ—Ç—ã –ü—Ä–æ–∂–∏–≤–∞—é—â–∏–µ –æ–±—è–∑–∞–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —á–∏—Å—Ç–æ—Ç—É –∏ –ø–æ—Ä—è–¥–æ–∫ –≤
                  –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç —É–±–æ—Ä–∫—É –∂–∏–ª—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                  –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–æ—Ä–º.
                </p>

                <p>
                  –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ —á–∏—Å—Ç–æ—Ç–µ –∏ –ø–æ—Ä—è–¥–∫–µ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–ª–∏
                  –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è, –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —á–∏—Å—Ç–æ–º –∏ –æ–ø—Ä—è—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –†–∞–±–æ—Ç–Ω–∏–∫–∏ –æ–±—è–∑–∞–Ω—ã —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞—Ç—å
                  –º—É—Å–æ—Ä –∏ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.
                </p>
                <p>
                  –≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –≤–∏–¥ ‚Äî –≤—ã–º—ã—Ç–∞—è —Ä–∞–±–æ—á–∞—è –æ–¥–µ–∂–¥–∞, —Å—Ç—Ä–∏–∂–∫–∞ –∏ –±–æ—Ä–æ–¥–∞ –ö–∞–∂–¥—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ–±—è–∑–∞–Ω —Å–æ–±–ª—é–¥–∞—Ç—å –æ–ø—Ä—è—Ç–Ω—ã–π
                  –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥. –†–∞–±–æ—á–∞—è –æ–¥–µ–∂–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å—Ç–æ–π –∏ —É—Ö–æ–∂–µ–Ω–Ω–æ–π, –∞ –ª–∏—á–Ω–∞—è –≥–∏–≥–∏–µ–Ω–∞ ‚Äî –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ
                  (–∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Å—Ç—Ä–∏–∂–∫–∞ –∏ –±–æ—Ä–æ–¥–∞).
                </p>
                <p>
                  –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ –≤ —á–∏—Å—Ç–æ—Ç–µ –∏ –ø–æ—Ä—è–¥–∫–µ –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å—Ç—ã–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º. –ú—É—Å–æ—Ä
                  —Å–ª–µ–¥—É–µ—Ç —É–±–∏—Ä–∞—Ç—å —Å—Ä–∞–∑—É, –∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏
                  –Ω–µ—Å—á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.
                </p>

                <p>
                  –Ø {userData?.fullName} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω —Å –∏–∑–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤—ã—à–µ —É—Å–ª–æ–≤–∏—è–º–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Ö –ø—Ä–∏–Ω–∏–º–∞—é
                  –∏ –æ–±—è–∑—É—é—Å—å —Å–æ–±–ª—é–¥–∞—Ç—å –∏—Ö –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ!{" "}
                </p>
              </div>
              
            </div>
                        
            <div
              id="instructions"
              className="instructions aspect-[794/1122] border border-solid border-gray-500  mt-3 mx-10 p-2"
            >
              <img src={instructions} className="w-[15vw] ms-5" alt="" srcset="" />

              <div className="p-5  text-[1.5vw] flex flex-col gap-y-2">
                <p className=" mt-6 font-bold">Bedingungen:</p>
                <p>
                  Verbot des Konsums von Drogen und Alkohol w√§hrend der Dienstreise
                  Der Konsum jeglicher Drogen und Alkohol ist w√§hrend der gesamten Dauer der 
                  Dienstreise strengstens untersagt. Ein Versto√ü gegen diese Regel kann 
                  disziplinarische Ma√ünahmen bis hin zur Beendigung des Arbeitsverh√§ltnisses nach sich ziehen
                </p>
                <p>
                  Sauberkeit und Ordnung in den Unterk√ºnften
                  Die Bewohner sind verpflichtet, in den zur Verf√ºgung gestellten Unterk√ºnften Sauberkeit und 
                  Ordnung zu gew√§hrleisten. Dazu geh√∂ren die Reinigung der Wohnr√§ume, der sachgem√§√üe Umgang mit 
                  Haushaltsger√§ten sowie die Einhaltung der hygienischen Vorschriften.
                </p>

                <p>
                  Sauberkeit und Ordnung der Transportmittel
                  Die f√ºr Arbeit oder Fahrten bereitgestellten Fahrzeuge m√ºssen stets in einem sauberen und ordentlichen 
                  Zustand gehalten werden. Die Mitarbeiter sind verpflichtet, regelm√§√üig M√ºll zu entsorgen und sich um 
                  den technischen Zustand der Fahrzeuge zu k√ºmmern
                </p>
                <p>
                  √Ñu√üeres Erscheinungsbild ‚Äî saubere Arbeitskleidung, gepflegte Frisur und Bart
                  Jeder Mitarbeiter ist verpflichtet, ein gepflegtes √§u√üeres Erscheinungsbild zu wahren. Die 
                  ArbeitsKitovung muss sauber und ordentlich sein, die pers√∂nliche Hygiene ist auf hohem 
                  Niveau zu halten (gepflegte Frisur und Bart).   
                </p>
                <p>
                  Sauberkeit und Ordnung am Arbeitsplatz
                  Der Arbeitsplatz muss sauber und organisiert sein. Abfall ist Kitovt zu entsorgen, und Arbeitsger√§te 
                  sind an den daf√ºr vorgesehenen Pl√§tzen aufzubewahren, um St√∂rungen und Unf√§lle zu vermeiden.
                </p>

                <p>
                  Ich, {userData?.fullName}  best√§tige hiermit, dass ich die oben genannten Bedingungen gelesen habe, sie 
                  vollst√§ndig akzeptiere und mich verpflichte, diese in vollem Umfang¬†einzuhalten!{" "}
                </p>  
              </div>
              
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default TutorialPage;
